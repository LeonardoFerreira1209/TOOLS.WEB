import { AnimationItem } from "lottie-web";
import { LottieAnimationLoader, IElement, ILottieProperty, ITrigger, ITriggerConstructor } from "../interfaces.js";
declare type SUPPORTED_ATTRIBUTES = "colors" | "src" | "icon" | "state" | "trigger" | "speed" | "stroke" | "scale" | "axis-x" | "axis-y";
export declare class Element extends HTMLElement implements IElement {
    private _root;
    private _isReady;
    private _lottie?;
    private _properties?;
    private _connectedTrigger?;
    private _storedIconData?;
    private _palette?;
    /**
     * Register Lottie library.
     * @param animationLoader Provide "loadAnimation" here from Lottie.
     */
    static registerAnimationLoader(animationLoader: LottieAnimationLoader): void;
    /**
     * Register supported icon. This is helpful with any kind of preload icons.
     * @param name Icon name.
     * @param iconData Icon data.
     */
    static registerIcon(name: string, iconData: any): void;
    /**
     * Register supported animation.
     * @param name
     * @param triggerClass
     */
    static registerTrigger(name: string, triggerClass: ITriggerConstructor): void;
    /**
     * Custom element observed attributes.
     */
    static get observedAttributes(): string[];
    /**
     * Check element version.
     */
    static get version(): string;
    constructor();
    /**
     * Element connected.
     */
    protected connectedCallback(): void;
    /**
     * Element disconnected.
     */
    protected disconnectedCallback(): void;
    /**
     * Handle attribute update.
     * @param name
     * @param oldValue
     * @param newValue
     */
    protected attributeChangedCallback(name: SUPPORTED_ATTRIBUTES, oldValue: any, newValue: any): void;
    /**
     * Init element.
     * @returns
     */
    protected init(): void;
    protected registerLottie(): void;
    protected unregisterLottie(): void;
    protected refresh(): void;
    protected notify(name: string, from: "icon" | "trigger"): void;
    protected triggerChanged(): void;
    protected colorsChanged(): void;
    protected strokeChanged(): void;
    protected stateChanged(): void;
    protected scaleChanged(): void;
    protected axisXChanged(): void;
    protected axisYChanged(): void;
    protected speedChanged(): void;
    protected iconChanged(): void;
    protected srcChanged(): Promise<void>;
    protected movePaletteToCssVariables(): void;
    /**
     * Access current trigger instance.
     */
    get connectedTrigger(): ITrigger | undefined;
    /**
     * Available properties for current icon.
     */
    get properties(): ILottieProperty[];
    /**
     * Available states for current icon.
     */
    get states(): string[];
    /**
     * Find default state.
     */
    get defaultState(): string | undefined;
    /**
     * Check whether the element is ready.
     */
    get isReady(): boolean;
    /**
     * Access lottie animation instance.
     */
    get lottie(): AnimationItem | undefined;
    /**
     * Update palette.
     */
    set palette(colors: {
        [key: string]: string;
    });
    /**
     * Access to colors get / update with convenient way.
     */
    get palette(): {
        [key: string]: string;
    };
    set icon(value: any);
    get icon(): any;
    set src(value: string | null);
    get src(): string | null;
    set state(value: string | null);
    get state(): string | null;
    set colors(value: string | null);
    get colors(): string | null;
    set trigger(value: string | null);
    get trigger(): string | null;
    set speed(value: any);
    get speed(): number | null;
    set stroke(value: any);
    get stroke(): number | null;
    set scale(value: any);
    get scale(): number | null;
    set axisX(value: any);
    get axisX(): number | null;
    set axisY(value: any);
    get axisY(): any;
    /**
     * Access animation container element.
     */
    private get container();
    /**
     * Access icon data for this element.
     */
    private get iconData();
    /**
     * Current animation speed.
     */
    private get animationSpeed();
    /**
     * Check element version.
     */
    get version(): string;
}
export {};
